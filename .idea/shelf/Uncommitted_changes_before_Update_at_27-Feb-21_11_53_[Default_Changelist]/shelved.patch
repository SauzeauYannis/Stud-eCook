Index: app/src/main/java/com/android/app/studecook/adapter/ViewPagerAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.app.studecook.adapter\r\n\r\nimport android.app.Dialog\r\nimport android.content.DialogInterface\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.view.animation.Animation\r\nimport android.view.animation.AnimationUtils\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\nimport com.android.app.studecook.R\r\nimport com.android.app.studecook.model.UserModel\r\nimport com.android.app.studecook.model.RecipeModel\r\nimport com.firebase.ui.firestore.FirestoreRecyclerOptions\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.toObject\r\n\r\nclass ViewPagerAdapter : RecyclerView.Adapter<ViewPagerAdapter.Pager2ViewHolder>() {\r\n\r\n    private val db = FirebaseFirestore.getInstance()\r\n    private val collectionReference = db.collection(\"recipes\")\r\n    private val currentUser = FirebaseAuth.getInstance().currentUser\r\n\r\n    private var recipeAdapter: RecipeAdapter? = null\r\n\r\n    inner class Pager2ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val itemSwipe: SwipeRefreshLayout = itemView.findViewById(R.id.home_swipeRefreshLayout)\r\n        val itemRecycler: RecyclerView = itemView.findViewById(R.id.home_recyclerView)\r\n        val itemFabFilter: FloatingActionButton = itemView.findViewById(R.id.fab_filter)\r\n        val itemText: TextView = itemView.findViewById(R.id.text_slide)\r\n    }\r\n\r\n    override fun onCreateViewHolder(\r\n            parent: ViewGroup,\r\n            viewType: Int\r\n    ): Pager2ViewHolder {\r\n        return Pager2ViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.layout_swipe_home, parent, false))\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return 3\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: Pager2ViewHolder, position: Int) {\r\n        holder.itemFabFilter.setOnClickListener {\r\n            val rotation: Animation by lazy {\r\n                AnimationUtils.loadAnimation(holder.itemView.context, R.anim.rotation)\r\n            }\r\n            it.startAnimation(rotation)\r\n\r\n            val dialog = Dialog(holder.itemFabFilter.context)\r\n            dialog.setCancelable(true)\r\n            dialog.setContentView(R.layout.filter_dialog)\r\n            dialog.window?.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            dialog.show()\r\n        }\r\n\r\n        holder.itemSwipe.setOnRefreshListener {\r\n            Toast.makeText(holder.itemView.context, holder.itemView.context.getString(R.string.toast_up_to_date), Toast.LENGTH_SHORT).show()\r\n            holder.itemSwipe.isRefreshing = false\r\n        }\r\n\r\n        setUpRecyclerView(holder, position)\r\n    }\r\n\r\n    private fun setUpRecyclerView(holder: Pager2ViewHolder, position: Int) {\r\n        holder.itemSwipe.isRefreshing = true\r\n\r\n        when (position) {\r\n            0 -> {\r\n                loadSubsPage(holder)\r\n            }\r\n            1 -> {\r\n                loadHomePage(holder)\r\n            }\r\n            else -> {\r\n                loadFavPage(holder)\r\n            }\r\n        }\r\n\r\n        holder.itemSwipe.isRefreshing = false\r\n    }\r\n\r\n    private fun loadSubsPage(holder: Pager2ViewHolder) {\r\n        if (currentUser == null || currentUser.isAnonymous) {\r\n            noRecipe(holder)\r\n            holder.itemText.text = holder.itemText.context.getString(R.string.text_forbid_ano)\r\n        } else {\r\n            db.collection(\"users\")\r\n                    .document(currentUser.uid)\r\n                    .get()\r\n                    .addOnSuccessListener { doc ->\r\n                        val user = doc.toObject<UserModel>()!!\r\n                        if (user.subs!!.isEmpty()) {\r\n                            noRecipe(holder)\r\n                        } else {\r\n                            val query = collectionReference.orderBy(\"date\", Query.Direction.DESCENDING)\r\n                                    .whereIn(\"uid\", user.subs!!)\r\n                            val firestoreRecyclerOptions = FirestoreRecyclerOptions.Builder<RecipeModel>()\r\n                                    .setQuery(query, RecipeModel::class.java)\r\n                                    .build()\r\n\r\n                            recipeAdapter = HomeRecipeAdapter(firestoreRecyclerOptions)\r\n                            holder.itemRecycler.layoutManager = GridLayoutManager(holder.itemRecycler.context, 2, LinearLayoutManager.VERTICAL, false)\r\n                            holder.itemRecycler.adapter = recipeAdapter\r\n                            recipeAdapter!!.startListening()\r\n                        }\r\n                    }\r\n        }\r\n    }\r\n\r\n    private fun loadHomePage(holder: Pager2ViewHolder) {\r\n        val query = collectionReference.orderBy(\"date\", Query.Direction.DESCENDING)\r\n        val firestoreRecyclerOptions = FirestoreRecyclerOptions.Builder<RecipeModel>()\r\n                .setQuery(query, RecipeModel::class.java)\r\n                .build()\r\n\r\n        recipeAdapter = HomeRecipeAdapter(firestoreRecyclerOptions)\r\n        holder.itemRecycler.layoutManager = GridLayoutManager(holder.itemRecycler.context, 2, LinearLayoutManager.VERTICAL, false)\r\n        holder.itemRecycler.adapter = recipeAdapter\r\n        recipeAdapter!!.startListening()\r\n    }\r\n\r\n    private fun loadFavPage(holder: Pager2ViewHolder) {\r\n        if (currentUser == null || currentUser.isAnonymous) {\r\n            noRecipe(holder)\r\n            holder.itemText.text = holder.itemText.context.getString(R.string.text_forbid_ano)\r\n        } else {\r\n            db.collection(\"users\")\r\n                    .document(currentUser.uid)\r\n                    .get()\r\n                    .addOnSuccessListener { doc ->\r\n                        val user = doc.toObject<UserModel>()!!\r\n                        if (user.favorites!!.isEmpty()) {\r\n                            noRecipe(holder)\r\n                        } else {\r\n                            val query = db.collection(\"recipes\").orderBy(\"date\", Query.Direction.DESCENDING)\r\n                                    .whereIn(\"__name__\", user.favorites!!)\r\n                            val firestoreRecyclerOptions = FirestoreRecyclerOptions.Builder<RecipeModel>()\r\n                                    .setQuery(query, RecipeModel::class.java)\r\n                                    .build()\r\n\r\n                            recipeAdapter = HomeFavRecipeAdapter(firestoreRecyclerOptions)\r\n                            holder.itemRecycler.layoutManager = GridLayoutManager(holder.itemRecycler.context, 2, LinearLayoutManager.VERTICAL, false)\r\n                            holder.itemRecycler.adapter = recipeAdapter\r\n                            recipeAdapter!!.startListening()\r\n                        }\r\n                    }\r\n        }\r\n    }\r\n\r\n    private fun noRecipe(holder: Pager2ViewHolder) {\r\n        holder.itemText.visibility = TextView.VISIBLE\r\n        holder.itemFabFilter.visibility = FloatingActionButton.INVISIBLE\r\n    }\r\n\r\n    fun startListening() {\r\n        recipeAdapter?.startListening()\r\n    }\r\n\r\n    fun stopListening() {\r\n        recipeAdapter?.stopListening()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/android/app/studecook/adapter/ViewPagerAdapter.kt	(revision 949b1789acc4272c7e18fc26057a4e17c6068657)
+++ app/src/main/java/com/android/app/studecook/adapter/ViewPagerAdapter.kt	(date 1614422943705)
@@ -52,15 +52,10 @@
 
     override fun onBindViewHolder(holder: Pager2ViewHolder, position: Int) {
         holder.itemFabFilter.setOnClickListener {
-            val rotation: Animation by lazy {
-                AnimationUtils.loadAnimation(holder.itemView.context, R.anim.rotation)
-            }
-            it.startAnimation(rotation)
-
             val dialog = Dialog(holder.itemFabFilter.context)
             dialog.setCancelable(true)
             dialog.setContentView(R.layout.filter_dialog)
-            dialog.window?.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+            dialog.window?.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)
             dialog.show()
         }
 
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <!-- Facebook application ID and custom URL scheme (app ID prefixed by 'fb'). -->\r\n    <string name=\"facebook_application_id\" translatable=\"false\">648008085898234</string>\r\n    <string name=\"facebook_login_protocol_scheme\" translatable=\"false\">fb648008085898234</string>\r\n\r\n    <string name=\"app_name\" translatable=\"false\">Stud\\'eCook</string>\r\n    <string name=\"title_activity_settings\" translatable=\"false\">SettingsActivity</string>\r\n\r\n    <!-- General -->\r\n    <string name=\"anonymous\">Anonymous</string>\r\n    <string name=\"text_type\">Type:</string>\r\n    <string name=\"text_diet\">Diet:</string>\r\n    <string name=\"text_time\">Time:</string>\r\n    <string name=\"text_price\">Price:</string>\r\n    <string name=\"image_time\">Time image</string>\r\n    <string name=\"image_price\">Price image</string>\r\n    <string name=\"image_fav\">Like image</string>\r\n    <string name=\"toast_welcome\">Welcome to Stud\\'eCook!</string>\r\n    <string name=\"account_edit\">Edit my account</string>\r\n    <string name=\"button_add_picture\">Add picture</string>\r\n    <string name=\"button_delete_picture\">Delete picture</string>\r\n    <string name=\"account_sub\">My subscriptions</string>\r\n    <string name=\"dialog_title_ano\">Anonymous connection</string>\r\n    <string name=\"dialog_message_ano\">Logging in as a guest allows you to view all the recipes available on the application.\\nHowever, you cannot :\\n- Add a recipe\\n- You subscribe to a person\\n- Add recipes to your favourites\\nThese actions are reserved for those who have an account.\\nWould you like to continue as a guest?\\n</string>\r\n    <string name=\"text_forbid_ano\">Login for this feature!</string>\r\n    <string name=\"button_ano_connection\">Login</string>\r\n    <string name=\"dialog_continue_ano\">Continue as a guest</string>\r\n\r\n    <!-- Bottom navigation menu title -->\r\n    <string name=\"title_home\">Recipes</string>\r\n    <string name=\"title_add\">Add</string>\r\n    <string name=\"title_other\">Other</string>\r\n    \r\n    <!-- Home -->\r\n    <string name=\"image_search\">Search button</string>\r\n    <string name=\"button_filter\">Filter button</string>\r\n    <string name=\"button_home_sub\">Subscriptions recipe button</string>\r\n    <string name=\"button_home_disc\">Discovery recipes button</string>\r\n    <string name=\"button_home_fav\">Your favorite recipes button</string>\r\n    <string name=\"image_recipe\">Image recipe</string>\r\n    <string name=\"toast_up_to_date\">You are up to date!</string>\r\n    <string name=\"text_home_sub\">Recipes of your subscriptions</string>\r\n    <string name=\"text_home_favorite\">Your favourite recipes</string>\r\n    <string name=\"text_no_recipe\">No recipes available</string>\r\n    <string name=\"dialog_unfav_title\">Remove the recipe from your favourites</string>\r\n    <string name=\"dialog_unfav_message\">Do you want to remove this recipe from your favourites?</string>\r\n\r\n    <!-- Recipe Page -->\r\n    <string name=\"text_fav\">Like:</string>\r\n    <string name=\"text_propoced_by\">Proposed by</string>\r\n    <string name=\"text_recipe_utensils\">Utensils list:</string>\r\n    <string name=\"text_recipe_ingr\">Ingredients list:</string>\r\n    <string name=\"text_recipe_steps\">Steps list:</string>\r\n    <string name=\"button_recipe_add_fav\">Add to your favourites</string>\r\n    <string-array name=\"nb_array\">\r\n        <item>For 1 people</item>\r\n        <item>For 2 people</item>\r\n        <item>For 3 people</item>\r\n        <item>For 4 people</item>\r\n        <item>For 5 people</item>\r\n        <item>For 6 people</item>\r\n        <item>For 7 people</item>\r\n        <item>For 8 people</item>\r\n        <item>For 9 people</item>\r\n        <item>For 10 people</item>\r\n    </string-array>\r\n    <string name=\"dialog_fav\">The recipe has been added to your favourites</string>\r\n\r\n    <!-- Search Page -->\r\n    <string name=\"search_query\">Look for a recipe</string>\r\n\r\n    <!-- Account -->\r\n    <string name=\"text_no_account\">You are not sign in</string>\r\n    <string name=\"text_account_anonymous\">You need to have an account to see this page</string>\r\n    <string name=\"text_account_title\">Your account</string>\r\n    <string name=\"image_my_account\">Your account picture</string>\r\n    <string name=\"text_account_my_recipe\">My shared recipes:</string>\r\n    <string name=\"toast_no_subs\">You haven\\'t subscriptions</string>\r\n    <string name=\"dialog_delete_title\">Delete this recipe</string>\r\n    <string name=\"dialog_delete_message\">Do you want to delete this recipe?</string>\r\n    <!-- Fragment Account Edit -->\r\n    <string name=\"text_account_name\">Account name:</string>\r\n    <string name=\"text_account_desc\">Account description:</string>\r\n    <string name=\"button_account_edit_validate\">Validate modifications</string>\r\n    <string name=\"account_name_false_short\">Account name too short</string>\r\n    <string name=\"account_name_false_long\">Account name too long</string>\r\n    <string name=\"desc_name_false_long\">Description too long</string>\r\n    <string name=\"alert_account_edit_title\">Confirmation</string>\r\n    <string name=\"alert_account_edit_message\">Are you sure you want to ignore the changes?</string>\r\n    <string name=\"alert_account_edit_validate\">The changes have been taken into consideration</string>\r\n    <string name=\"error_account_edit\">Error: Connection with server</string>\r\n    <!-- Fragment Account View -->\r\n    <string name=\"image_subs_account\">Account picture</string>\r\n    <string name=\"button_subs\">Subscribe</string>\r\n    <string name=\"button_unsubs\">Unsubscribe</string>\r\n    <string name=\"text_view_acc_recipe\">His shared recipes:</string>\r\n\r\n    <!-- Settings -->\r\n    <string name=\"menu_param\">Settings</string>\r\n    <!-- Settings Theme -->\r\n    <string name=\"appearance_header\">Theme</string>\r\n    <string name=\"setting_dark\" translatable=\"false\">setting_dark</string>\r\n    <string name=\"dark_title\">Activate the dark theme</string>\r\n    <string name=\"dark_off\">Dark theme off</string>\r\n    <string name=\"dark_on\">Dark theme on</string>\r\n    <!-- Settings Account -->\r\n    <string name=\"account_header\">Sign out</string>\r\n    <string name=\"setting_account\" translatable=\"false\">setting_account</string>\r\n    <string name=\"account_on\">Account name : %s</string>\r\n    <string name=\"account_off\">You are already not sign</string>\r\n    <string name=\"alert_setting_account\">Do you want to sign out ?</string>\r\n    <!-- Settings More information -->\r\n    <string name=\"settings_info_title\">More informations</string>\r\n    <string name=\"setting_open_source\" translatable=\"false\">setting_open_source</string>\r\n    <string name=\"open_source_libraries\">Open Source libraries</string>\r\n\r\n    <!-- Add fragment -->\r\n    <string name=\"text_add_title\">Add your recipe Step Step %d/5</string>\r\n    <string name=\"button_add_next\">Next page button</string>\r\n    <string name=\"button_previous\">Previous page button</string>\r\n    <string name=\"text_add_min_max\">\" (%d to %d):\"</string>\r\n    <!-- fragment 1 -->\r\n    <string name=\"text_add_name\">Name of your recipe:</string>\r\n    <string name=\"edit_text_add_name_hint\">Example: Cookie</string>\r\n    <string name=\"add_name_false_short\">Recipe name too short</string>\r\n    <string name=\"add_name_false_long\">Recipe name too long</string>\r\n    <string name=\"add_name_false\">Name of recipe is not good</string>\r\n    <string-array name=\"time_array\">\r\n        <item>Fast: less than 30min</item>\r\n        <item>Medium: between 30min and 1h30</item>\r\n        <item>Long: more than 1h30</item>\r\n    </string-array>\r\n    <string-array name=\"price_array\">\r\n        <item>Cheap: less than 3 €</item>\r\n        <item>Medium: between 3 € and 5 €</item>\r\n        <item>Expensive: more than 5 €</item>\r\n    </string-array>\r\n    <string name=\"button_sent_data\">Validate recipe button</string>\r\n    <!-- fragment 2 -->\r\n    <string name=\"text_add_nbP\">Number of people: %d</string>\r\n    <string-array name=\"type_array\">\r\n        <item>Starter</item>\r\n        <item>Dish</item>\r\n        <item>Dessert</item>\r\n        <item>Drink</item>\r\n    </string-array>\r\n    <string-array name=\"diet_array\">\r\n        <item>None</item>\r\n        <item>Vegetarian</item>\r\n        <item>Vegan</item>\r\n    </string-array>\r\n    <!-- fragment 3 -->\r\n    <string name=\"button_add_utensil\">Add utensil</string>\r\n    <string name=\"dialog_title_utensil\">Choose utensils needed</string>\r\n    <string name=\"text_add_utensils_list\">Utensils:</string>\r\n    <string name=\"text_add_utensils_false\">You need to add at least one utensil</string>\r\n    <string-array name=\"utensil_array\">\r\n        <item>Saucepan</item>\r\n        <item>Frying pan</item>\r\n        <item>Microwave</item>\r\n        <item>Oven</item>\r\n        <item>Bowl</item>\r\n        <item>Flat</item>\r\n        <item>Salad bowl</item>\r\n        <item>Other</item>\r\n    </string-array>\r\n    <string name=\"text_add_ingredient\">Ingredients</string>\r\n    <string name=\"edit_text_add_num_ingredient_hint\" translatable=\"false\">667</string>\r\n    <string name=\"edit_text_add_ingredient_hint\">Example: Flour</string>\r\n    <string name=\"image_delete_ingredient\">Delete current ingredient</string>\r\n    <string name=\"button_add_ingredient\">Add ingredient</string>\r\n    <string-array name=\"ingredient_type_array\">\r\n        <item>Unit</item>\r\n        <item>g</item>\r\n        <item>ml</item>\r\n        <item>tsp</item>\r\n        <item>tbl</item>\r\n    </string-array>\r\n    <string name=\"text_add_ingredient_too_much\">You have reach the maximum amount of ingredients</string>\r\n    <string name=\"text_add_ingredient_false\">You need to add at least one ingredient</string>\r\n    <string name=\"text_add_ingredient_empty\">You need to enter a ingredient name</string>\r\n    <string name=\"text_add_ingredient_num_empty\">You need to enter a quantity of ingredient</string>\r\n    <!-- fragment 4 -->\r\n    <string name=\"text_add_step\">Steps</string>\r\n    <string name=\"button_add_step\">Add Step</string>\r\n    <string name=\"image_delete_step\">Delete current step</string>\r\n    <string name=\"text_add_ingredient_hint\">Step %d</string>\r\n    <string name=\"text_add_step_too_much\">You can\\'t add one more step</string>\r\n    <string name=\"text_add_step_empty\">You need to add at least one step</string>\r\n    <string name=\"text_add_step_isEmpty\">You need to complete all steps</string>\r\n    <!-- fragment 5 -->\r\n    <string name=\"text_add_picture\">Picture (optional)</string>\r\n    <string name=\"image_desc_add\">Recipe image</string>\r\n    <string name=\"text_add_recipe_failure\">Error: The recipe can\\'t be upload</string>\r\n    <string name=\"text_add_recipe_no_net\">Error: Connection failure!</string>\r\n    <string name=\"text_add_recipe_failure_image\">Error: Image can\\'t be upload!</string>\r\n    <string name=\"text_add_recipe_anonymous\">You can\\'t add a recipe if you are anonymous\\nPlease login!</string>\r\n    <string name=\"dialog_add_title\">Recipe has been added</string>\r\n    <string name=\"dialog_add_text\">Thank you for adding your recipe!</string>\r\n    <string name=\"dialog_add_ok\">Return to home</string>\r\n\r\n    <!-- save values -->\r\n    <string name=\"saved_add_name_key\" translatable=\"false\">name</string>\r\n    <string name=\"saved_add_time_key\" translatable=\"false\">time</string>\r\n    <string name=\"saved_add_price_key\" translatable=\"false\">price</string>\r\n    <string name=\"saved_add_number_key\" translatable=\"false\">number</string>\r\n    <string name=\"saved_add_type_key\" translatable=\"false\">type</string>\r\n    <string name=\"saved_add_diet_key\" translatable=\"false\">diet</string>\r\n    <string name=\"saved_add_utensils_key\" translatable=\"false\">utensils</string>\r\n    <string name=\"saved_add_ingredient_number_key\" translatable=\"false\">ingredient number</string>\r\n    <string name=\"saved_add_ingredients_quantity_key\" translatable=\"false\">ingredients quantity</string>\r\n    <string name=\"saved_add_ingredients_type_key\" translatable=\"false\">ingredients type</string>\r\n    <string name=\"saved_add_ingredients_name_key\" translatable=\"false\">ingredients name</string>\r\n    <string name=\"saved_add_step_number_key\" translatable=\"false\">step number</string>\r\n    <string name=\"saved_add_steps_key\" translatable=\"false\">steps</string>\r\n\r\n    <!-- Cloud Firestore (database) -->\r\n    <string name=\"collection_recipes\" translatable=\"false\">recipes</string>\r\n    <string name=\"collection_users\" translatable=\"false\">users</string>\r\n    <string name=\"App_version\" translatable=\"false\">app_version</string>\r\n    <string name=\"setting_version_title\" translatable=\"false\">Version</string>\r\n    <string name=\"setting_version_summary\" translatable=\"false\">1.0 (Beta)</string>\r\n    <string name=\"setting_eula_key\">setting_eula</string>\r\n    <string name=\"setting_eula\">EULA</string>\r\n    <string name=\"setting_eula_summary\">End-user license agreement</string>\r\n    <string name=\"setting_contact\">Contact us</string>\r\n    <string name=\"setting_contact_key\" translatable=\"false\">setting_contact_us_key</string>\r\n    <string name=\"setting_contact_summary\">studecook@gmail.com</string>\r\n    <string name=\"filtre\">FILTERS</string>\r\n    <string name=\"filtre_nouveautes\">Newers</string>\r\n    <string name=\"filtre_les_mieux_notes\">Top rated</string>\r\n    <string name=\"filtre_les_moins_cheres\">Cheapest</string>\r\n    <string name=\"filtre_les_plus_rapides\">Fastest</string>\r\n    <string name=\"filtre_text_premierFiltre\">Sort by :</string>\r\n    <string name=\"filtre_text_regime\">Diet : </string>\r\n    <string name=\"filtre_classique\">Classic</string>\r\n    <string name=\"filtre_vegan\">Vegan</string>\r\n    <string name=\"filtre_vegetarien\">Vegetarian</string>\r\n    <string name=\"filtre_text_categorie\">Category :</string>\r\n    <string name=\"filtre_entree\">Entree</string>\r\n    <string name=\"filtre_plat\">Dish</string>\r\n    <string name=\"filtre_dessert\">Dessert</string>\r\n    <string name=\"filtre_boisson\">Drink</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision 949b1789acc4272c7e18fc26057a4e17c6068657)
+++ app/src/main/res/values/strings.xml	(date 1614422598951)
@@ -227,7 +227,7 @@
     <string name="setting_contact_key" translatable="false">setting_contact_us_key</string>
     <string name="setting_contact_summary">studecook@gmail.com</string>
     <string name="filtre">FILTERS</string>
-    <string name="filtre_nouveautes">Newers</string>
+    <string name="filtre_nouveautes">News</string>
     <string name="filtre_les_mieux_notes">Top rated</string>
     <string name="filtre_les_moins_cheres">Cheapest</string>
     <string name="filtre_les_plus_rapides">Fastest</string>
@@ -237,7 +237,7 @@
     <string name="filtre_vegan">Vegan</string>
     <string name="filtre_vegetarien">Vegetarian</string>
     <string name="filtre_text_categorie">Category :</string>
-    <string name="filtre_entree">Entree</string>
+    <string name="filtre_entree">Starter</string>
     <string name="filtre_plat">Dish</string>
     <string name="filtre_dessert">Dessert</string>
     <string name="filtre_boisson">Drink</string>
Index: app/src/main/java/com/android/app/studecook/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.app.studecook\r\n\r\nimport android.app.Activity\r\nimport android.app.AlertDialog\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.app.AppCompatDelegate\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.fragment.NavHostFragment\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.android.app.studecook.fragment.home.HomeFragmentDirections\r\nimport com.firebase.ui.auth.AuthUI\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\n\r\nopen class MainActivity : AppCompatActivity() {\r\n\r\n    private val db = Firebase.firestore\r\n\r\n    private lateinit var navController: NavController\r\n\r\n    companion object {\r\n        const val RC_SIGN_IN = 123\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        val sharedPreferences = getSharedPreferences(\"dark\", 0)\r\n        val isDark = sharedPreferences.getBoolean(\"dark_mode\", false)\r\n        if (isDark) {\r\n            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\r\n        } else {\r\n            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\r\n        }\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setContentView(R.layout.activity_main)\r\n\r\n        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment\r\n        navController = navHostFragment.navController\r\n\r\n        nav_view.setupWithNavController(navController)\r\n\r\n        if (FirebaseAuth.getInstance().currentUser == null) {\r\n            createSignInIntent()\r\n        }\r\n    }\r\n\r\n    private fun createSignInIntent() {\r\n        val providers = arrayListOf(\r\n            AuthUI.IdpConfig.AnonymousBuilder().build(),\r\n            AuthUI.IdpConfig.EmailBuilder().build(),\r\n            AuthUI.IdpConfig.GoogleBuilder().build(),\r\n            AuthUI.IdpConfig.FacebookBuilder().build(),\r\n            AuthUI.IdpConfig.TwitterBuilder().build()\r\n        )\r\n\r\n        startActivityForResult(\r\n            AuthUI.getInstance()\r\n                    .createSignInIntentBuilder()\r\n                    .setAvailableProviders(providers)\r\n                    .setTheme(R.style.AppTheme)\r\n                    .enableAnonymousUsersAutoUpgrade()\r\n                    .build(),\r\n            RC_SIGN_IN)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == RC_SIGN_IN) {\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                if (!FirebaseAuth.getInstance().currentUser!!.isAnonymous) {\r\n                    saveUser()\r\n                }\r\n                else\r\n                    dialogAnonymous()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun dialogAnonymous() {\r\n        AlertDialog.Builder(this)\r\n                .setTitle(getString(R.string.dialog_title_ano))\r\n                .setMessage(getString(R.string.dialog_message_ano))\r\n                .setPositiveButton(android.R.string.ok) { dialog, _ ->\r\n                    dialog.cancel()\r\n                }\r\n                .setNegativeButton(android.R.string.cancel) { _, _ ->\r\n                    AuthUI.getInstance()\r\n                            .signOut(this)\r\n                            .addOnCompleteListener {\r\n                                onRestart()\r\n                            }\r\n                }\r\n                .show()\r\n    }\r\n\r\n    private fun saveUser() {\r\n        val currentUser = FirebaseAuth.getInstance().currentUser\r\n        val userRef = db.collection(getString(R.string.collection_users)).document(currentUser!!.uid)\r\n\r\n        userRef.get()\r\n                .addOnSuccessListener { doc ->\r\n                    if (!doc.exists()) {\r\n                        val user = hashMapOf(\r\n                                \"name\" to currentUser.displayName,\r\n                                \"image\" to \"\",\r\n                                \"description\" to \"\",\r\n                                \"subs\" to ArrayList<String>(),\r\n                                \"favorites\" to ArrayList<String>()\r\n                        )\r\n                        userRef.set(user)\r\n                                .addOnSuccessListener {\r\n                                    Toast.makeText(this, getString(R.string.toast_welcome), Toast.LENGTH_LONG).show()\r\n                                    navController.navigate(HomeFragmentDirections.actionNavigationHomeToNavigationAccount())\r\n                                }\r\n                    } else {\r\n                        navController.navigate(HomeFragmentDirections.actionNavigationHomeToNavigationAccount())\r\n                    }\r\n                }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/android/app/studecook/MainActivity.kt	(revision 949b1789acc4272c7e18fc26057a4e17c6068657)
+++ app/src/main/java/com/android/app/studecook/MainActivity.kt	(date 1614423155827)
@@ -59,13 +59,15 @@
         )
 
         startActivityForResult(
-            AuthUI.getInstance()
-                    .createSignInIntentBuilder()
-                    .setAvailableProviders(providers)
-                    .setTheme(R.style.AppTheme)
-                    .enableAnonymousUsersAutoUpgrade()
-                    .build(),
-            RC_SIGN_IN)
+                AuthUI.getInstance()
+                        .createSignInIntentBuilder()
+                        .setAvailableProviders(providers)
+                        .setTheme(R.style.AppTheme)
+                        .enableAnonymousUsersAutoUpgrade()
+                        .setTosAndPrivacyPolicyUrls("https://strikza.github.io/studecookEULA.com/", "https://strikza.github.io/studecookEULA.com/")
+                        .setLogo(R.drawable.ic_login) // TODO: 27-Feb-21 Changer par le logo de l'app
+                        .build(),
+                RC_SIGN_IN)
     }
 
     override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
Index: app/src/main/res/anim/rotation.xml
===================================================================
--- app/src/main/res/anim/rotation.xml	(revision 949b1789acc4272c7e18fc26057a4e17c6068657)
+++ app/src/main/res/anim/rotation.xml	(revision 949b1789acc4272c7e18fc26057a4e17c6068657)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<set xmlns:android="http://schemas.android.com/apk/res/android">
-
-    <rotate
-        android:fromDegrees="0"
-        android:pivotX="50%"
-        android:pivotY="50%"
-        android:toDegrees="360"
-        android:duration="1000" />
-
-</set>
\ No newline at end of file
Index: app/src/main/java/com/android/app/studecook/fragment/recipe/RecipeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.app.studecook.fragment.recipe\r\n\r\nimport android.app.AlertDialog\r\nimport android.os.Bundle\r\nimport android.text.SpannableString\r\nimport android.text.Spanned\r\nimport android.text.method.LinkMovementMethod\r\nimport android.text.style.ClickableSpan\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.activity.OnBackPressedCallback\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport com.android.app.studecook.R\r\nimport com.android.app.studecook.model.RecipeModel\r\nimport com.android.app.studecook.model.UserModel\r\nimport com.bumptech.glide.Glide\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.firestore.FieldValue\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot\r\nimport com.google.firebase.firestore.ktx.toObject\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport kotlinx.android.synthetic.main.fragment_recipe.view.*\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\nclass RecipeFragment : Fragment() {\r\n\r\n    private val db = FirebaseFirestore.getInstance()\r\n    private val currentUser = FirebaseAuth.getInstance().currentUser\r\n    private val args by navArgs<RecipeFragmentArgs>()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val callback = object : OnBackPressedCallback(true) {\r\n            override fun handleOnBackPressed() {\r\n                findNavController().navigate(R.id.action_recipeFragment_to_navigation_home)\r\n            }\r\n        }\r\n\r\n        requireActivity().onBackPressedDispatcher.addCallback(callback)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val root = inflater.inflate(R.layout.fragment_recipe, container, false)\r\n        val recipe = args.currentRecipe\r\n\r\n        root.image_recipe_prev.setOnClickListener {\r\n            findNavController().navigate(R.id.action_recipeFragment_to_navigation_home)\r\n        }\r\n\r\n        root.text_recipe_name.text = recipe.name\r\n\r\n        loadImage(recipe.image, root.image_recipe)\r\n\r\n        root.text_recipe_type.append(\" \" + resources.getStringArray(R.array.type_array)[recipe.type!!])\r\n\r\n        root.text_recipe_diet.append(\" \" + resources.getStringArray(R.array.diet_array)[recipe.diet!!])\r\n\r\n        loadIcons(root, recipe)\r\n\r\n        loadOwner(recipe, root)\r\n\r\n        loadUtensils(recipe, root)\r\n\r\n        loadNbPeople(root, recipe)\r\n\r\n        loadIngredients(recipe, root, recipe.ingredientsQuantity!!)\r\n\r\n        loadSteps(recipe, root)\r\n\r\n        clickableFavorite(root.button_recipe_fav, recipe.date!!, recipe.fav!!, root.text_recipe_fav)\r\n\r\n        return root\r\n    }\r\n\r\n    private fun loadNbPeople(root: View, recipe: RecipeModel) {\r\n        ArrayAdapter.createFromResource(\r\n                root.context,\r\n                R.array.nb_array,\r\n                android.R.layout.simple_spinner_item\r\n        ).also { arrayAdapter ->\r\n            arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\n            root.spinner_nb.adapter = arrayAdapter\r\n            root.spinner_nb.setSelection(\r\n                    recipe.number!! - 1\r\n            )\r\n        }\r\n\r\n        root.spinner_nb.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\r\n            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {\r\n                val factor = (position + 1).toFloat() / recipe.number!!.toFloat()\r\n                val oldQuantity = recipe.ingredientsQuantity!!\r\n                val newQuantity = ArrayList<String>(oldQuantity.size)\r\n\r\n                for (ing in oldQuantity)\r\n                    newQuantity.add(((ing.toLong() * factor).toString()).replace(\"[1234567890]+(.0)\", \"\"))\r\n                loadIngredients(recipe, root, newQuantity)\r\n            }\r\n            override fun onNothingSelected(parent: AdapterView<*>) {}\r\n        }\r\n    }\r\n\r\n    private fun loadIngredients(recipe: RecipeModel, root: View, quantity: List<String>) {\r\n        root.layout_ing.removeAllViews()\r\n        for (i in quantity.indices) {\r\n            val ingredientText = TextView(context)\r\n            var type = \"\"\r\n            if (recipe.ingredientsType!![i].toInt() > 0)\r\n                type = resources.getStringArray(R.array.ingredient_type_array)[recipe.ingredientsType!![i].toInt()]\r\n            val text = \"- ${quantity[i]} $type ${recipe.ingredientsName!![i]}\"\r\n            ingredientText.text = text\r\n            ingredientText.textSize = 16F\r\n            root.layout_ing.addView(ingredientText)\r\n        }\r\n    }\r\n\r\n    private fun loadUtensils(recipe: RecipeModel, root: View) {\r\n        for (u in recipe.utensils!!) {\r\n            val utensilText = TextView(context)\r\n            val utensil = resources.getStringArray(R.array.utensil_array)[u.toInt()]\r\n            val text = \"- $utensil\"\r\n            utensilText.text = text\r\n            utensilText.textSize = 16F\r\n            root.layout_utensils.addView(utensilText)\r\n        }\r\n    }\r\n\r\n    private fun loadSteps(recipe: RecipeModel, root: View) {\r\n        var count = 1\r\n        for (steps in recipe.steps!!) {\r\n            val stepText = TextView(context)\r\n            val text = \"$count) $steps\\n\"\r\n            stepText.text = text\r\n            stepText.textSize = 16F\r\n            root.layout_steps.addView(stepText)\r\n            count++\r\n        }\r\n    }\r\n\r\n    private fun loadOwner(recipe: RecipeModel, root: View) {\r\n        db.collection(\"users\")\r\n                .document(recipe.uid!!)\r\n                .get().addOnSuccessListener { doc ->\r\n                    val user = doc.toObject<UserModel>()!!\r\n                    clickableOwner(root.text_recipe_owner, user, recipe.uid!!)\r\n                }\r\n    }\r\n\r\n    private fun loadImage(imagePath: String?, imageView: ImageView) {\r\n        if (imagePath != null) {\r\n            val storageReference = FirebaseStorage.getInstance().reference.child(imagePath)\r\n            storageReference.downloadUrl.addOnSuccessListener { uri ->\r\n                Glide.with(requireContext())\r\n                        .load(uri)\r\n                        .into(imageView)\r\n            }\r\n        } else\r\n            imageView.visibility = ImageView.GONE\r\n    }\r\n\r\n    private fun loadIcons(root: View, recipe: RecipeModel) {\r\n        val pricesImages = listOf<ImageView>(\r\n            root.image_recipe_price,\r\n            root.image_recipe_price2,\r\n            root.image_recipe_price3\r\n        )\r\n        val timesImages = listOf<ImageView>(\r\n            root.image_recipe_time,\r\n            root.image_recipe_time2,\r\n            root.image_recipe_time3\r\n        )\r\n\r\n        for (i in 0..recipe.price!!)\r\n            pricesImages[i].alpha = 1.0F\r\n        for (i in 0..recipe.time!!)\r\n            timesImages[i].alpha = 1.0F\r\n\r\n        root.text_recipe_fav.text = recipe.fav.toString()\r\n    }\r\n\r\n    private fun clickableOwner(text: TextView, user: UserModel, uid: String) {\r\n        val name = user.name!!\r\n        val clickableName = SpannableString(name)\r\n        clickableName.setSpan(object : ClickableSpan() {\r\n            override fun onClick(p0: View) {\r\n                if (uid != FirebaseAuth.getInstance().currentUser!!.uid) {\r\n                    val action = RecipeFragmentDirections.actionRecipeFragmentToAccountViewFragment(user, uid)\r\n                    findNavController().navigate(action)\r\n                } else\r\n                    findNavController().navigate(R.id.action_recipeFragment_to_navigation_account)\r\n            }\r\n        }, 0, name.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\r\n        text.append(\" \")\r\n        text.append(clickableName)\r\n        text.movementMethod = LinkMovementMethod.getInstance()\r\n    }\r\n\r\n    private fun clickableFavorite(buttonRecipeFav: Button, date: Date, fav: Int, textFav: TextView) {\r\n        db.collection(getString(R.string.collection_recipes))\r\n                .whereEqualTo(\"date\", date)\r\n                .get()\r\n                .addOnSuccessListener { docs ->\r\n                    for (doc in docs) {\r\n                        db.collection(getString(R.string.collection_users))\r\n                                .document(currentUser!!.uid)\r\n                                .get()\r\n                                .addOnSuccessListener { document ->\r\n                                    val favList = document.get(\"favorites\") as List<*>\r\n                                    if (favList.contains(doc.id)) {\r\n                                        buttonRecipeFav.alpha = 0.1F\r\n                                        buttonRecipeFav.isEnabled = false\r\n                                    } else {\r\n                                        buttonRecipeFav.setOnClickListener {\r\n                                            if (currentUser.isAnonymous) {\r\n                                                Toast.makeText(context, getString(R.string.text_forbid_ano), Toast.LENGTH_SHORT).show()\r\n                                            } else {\r\n                                                addToFavorite(buttonRecipeFav, doc, fav, currentUser, textFav)\r\n                                            }\r\n                                    }\r\n                                }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun addToFavorite(buttonRecipeFav: Button, doc: QueryDocumentSnapshot, fav: Int, currentUser: FirebaseUser, textFav: TextView) {\r\n        db.collection(getString(R.string.collection_recipes))\r\n                .document(doc.id)\r\n                .update(\"fav\", fav + 1)\r\n        db.collection(getString(R.string.collection_users))\r\n                .document(currentUser.uid)\r\n                .update(\"favorites\", FieldValue.arrayUnion(doc.id))\r\n        AlertDialog.Builder(context)\r\n                .setMessage(getString(R.string.dialog_fav))\r\n                .setPositiveButton(android.R.string.ok) { dialog, _ ->\r\n                    dialog.cancel()\r\n                }\r\n                .show()\r\n        textFav.text = (fav + 1).toString()\r\n        buttonRecipeFav.alpha = 0.1F\r\n        buttonRecipeFav.isEnabled = false\r\n        return\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/android/app/studecook/fragment/recipe/RecipeFragment.kt	(revision 949b1789acc4272c7e18fc26057a4e17c6068657)
+++ app/src/main/java/com/android/app/studecook/fragment/recipe/RecipeFragment.kt	(date 1614421818270)
@@ -103,7 +103,7 @@
                 val newQuantity = ArrayList<String>(oldQuantity.size)
 
                 for (ing in oldQuantity)
-                    newQuantity.add(((ing.toLong() * factor).toString()).replace("[1234567890]+(.0)", ""))
+                    newQuantity.add(((ing.toLong() * factor).toString()).replace(".0", ""))
                 loadIngredients(recipe, root, newQuantity)
             }
             override fun onNothingSelected(parent: AdapterView<*>) {}
Index: app/src/main/res/drawable/ic_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/ic_login.xml	(date 1614423048934)
+++ app/src/main/res/drawable/ic_login.xml	(date 1614423048934)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M11,7L9.6,8.4l2.6,2.6H2v2h10.2l-2.6,2.6L11,17l5,-5L11,7zM20,19h-8v2h8c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2h-8v2h8V19z"/>
+</vector>
